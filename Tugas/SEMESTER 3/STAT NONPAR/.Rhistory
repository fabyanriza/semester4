runExample("01_hello")
install.packages("shiny")
library(shiny)
library(shiny)
runExample("01_hello")
library(shiny)
install.packages("shiny")
source("~/.active-rstudio-document")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
View(ui)
View(ui)
ui
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp('D:/Project/R/shiny web app/application')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
source("D:/Project/R/shiny web app/application/app.R")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
library(shiny)
runExample("01_hello")
runExample("09_upload")
runExample("09_upload")
library(shiny)
library(shiny)
runExample("09_upload")
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose CSV File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# Horizontal line ----
tags$hr(),
# Input: Checkbox if file has header ----
checkboxInput("header", "Header", TRUE),
# Input: Select separator ----
radioButtons("sep", "Separator",
choices = c(Comma = ",",
Semicolon = ";",
Tab = "\t"),
selected = ","),
# Input: Select quotes ----
radioButtons("quote", "Quote",
choices = c(None = "",
"Double Quote" = '"',
"Single Quote" = "'"),
selected = '"'),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
df <- read.csv(input$file1$datapath,
header = input$header,
sep = input$sep,
quote = input$quote)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
runApp('D:/Project/R/shiny web app/test')
library(shiny)
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/test')
library(ggplot2)
library(ggplot2)
runApp('D:/Project/R/shiny web app/test')
install.packages("plotly")
library(plotly)
runApp('D:/Project/R/shiny web app/test')
library(plotly)
runApp('D:/Project/R/shiny web app/test')
library(shiny)
library(ggplot2)
library(plotly)
library(plotly)
runApp('D:/Project/R/shiny web app/test')
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(plotly)
shiny::runApp('D:/Project/R/shiny web app/test')
runApp('D:/Project/R/shiny web app/application')
install.packages("mvtnorm")
library(BSDA)
library(shiny)
install.packages("BSDA")
df = c(12,
13,
18,
17,
21,
14,
23,
20,
14,
11,
18,
20,
10,
22,
21,
12,
9
)
SIGN.test(df, md = 15.0, alternative = "greater",conf.level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
# Install paket-paket jika belum terpasang
# install.packages("ggplot2")
# install.packages("car")
# Memuat paket-paket
library(ggplot2)
library(car)
# Contoh data
set.seed(123)
x <- rnorm(100)
y <- 2 * x + rnorm(100)
# Membuat data frame
data <- data.frame(x = x, y = y)
# Membuat model regresi
model <- lm(y ~ x, data = data)
# Menghitung leverage, residual, dan influence
leverage_values <- hatvalues(model)
residuals_studentized <- studres(model)
# Install paket-paket jika belum terpasang
# install.packages("ggplot2")
# install.packages("car")
# Memuat paket-paket
library(ggplot2)
library(car)
# Contoh data
set.seed(123)
x <- rnorm(100)
y <- 2 * x + rnorm(100)
# Membuat data frame
data <- data.frame(x = x, y = y)
# Membuat model regresi
model <- lm(y ~ x, data = data)
# Menghitung leverage, residual, dan influence
leverage_values <- hatvalues(model)
residuals_studentized <- rstandard(model)
influence_values <- influence(model)$infmat[, "CookD"]
# Menambahkan data pengukuran ke data frame
data <- cbind(data, leverage_values, residuals_studentized, influence_values)
residuals_studentized <- rstandard(model)
influence_values <- influence(model)$infmat[, "CookD"]
leverage_values
residuals_studentized
data <- data.frame(data, leverage_values, residuals_studentized, influence_values)
data <- data.frame(x = x, y = y, Leverage = leverage_values, Residuals_Studentized = residuals_studentized, Influence = influence_values)
# Menampilkan hasil
print(data)
data <- data.frame(x = x, y = y, Leverage = leverage_values, Residuals_Studentized = residuals_studentized, Influence = influence_values)
# Menambahkan data pengukuran ke data frame
data <- data.frame(x = x, y = y)
data$leverage_values <- leverage_values
data$residuals_studentized <- residuals_studentized
data$influence_values <- influence_values
# Install paket-paket jika belum terpasang
# install.packages("ggplot2")
# install.packages("car")
# Memuat paket-paket
library(ggplot2)
library(car)
# Contoh data
set.seed(123)
x <- rnorm(100)
y <- 2 * x + rnorm(100)
# Membuat data frame
data <- data.frame(x = x, y = y)
# Membuat model regresi
model <- lm(y ~ x, data = data)
# Menghitung leverage, residual, dan influence
leverage_values <- hatvalues(model)
residuals_studentized <- rstandard(model)
influence_values <- influence(model)$infmat[, "CookD"]
# Menambahkan data pengukuran ke data frame
# Menambahkan data pengukuran ke data frame
data <- data.frame(x = x, y = y)
data$leverage_values <- leverage_values
data$residuals_studentized <- residuals_studentized
data$influence_values <- influence_values
# Menampilkan hasil
print(data)
# Menampilkan hasil
print(data)
# Membuat plot regresi dengan nilai leverage, residual, dan influence
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_segment(aes(xend = x, yend = predict(model), color = "Leverage"),
data = data.frame(x = data$x, y = data$y, xend = data$x, yend = predict(model)),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), size = 0.5) +
geom_segment(aes(xend = x, yend = predict(model), color = "Residual"),
data = data.frame(x = data$x, y = data$y, xend = data$x, yend = predict(model) + residuals_studentized),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), size = 0.5) +
geom_segment(aes(xend = x, yend = predict(model), color = "Influence"),
data = data.frame(x = data$x, y = data$y, xend = data$x, yend = predict(model) + influence_values),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), size = 0.5) +
theme_minimal() +
labs(color = "Metric") +
ggtitle("Plot Regresi dengan Leverage, Residual, dan Influence")
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_segment(aes(xend = x, yend = predict(model), color = "Leverage"),
data = data.frame(x = data$x, y = data$y, xend = data$x, yend = predict(model)),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), linewidth = 0.5) +
geom_segment(aes(xend = x, yend = predict(model), color = "Residual"),
data = data.frame(x = data$x, y = data$y, xend = data$x, yend = predict(model) + residuals_studentized),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), linewidth = 0.5) +
geom_segment(aes(xend = x, yend = predict(model), color = "Influence"),
data = data.frame(x = data$x, y = data$y, xend = data$x, yend = predict(model) + influence_values),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), linewidth = 0.5) +
theme_minimal() +
labs(color = "Metric") +
ggtitle("Plot Regresi dengan Leverage, Residual, dan Influence")
library(ggplot2)
library(car)
# Example data
set.seed(123)
x <- rnorm(100)
y <- 2 * x + rnorm(100)
# Create a data frame
data <- data.frame(x = x, y = y)
# Fit a linear regression model
model <- lm(y ~ x, data = data)
# Compute leverage, residuals, and influence
leverage_values <- hatvalues(model)
residuals_studentized <- studres(model)
residuals_studentized <- rstandard(model)
influence_values <- influence(model)$infmat[, "CookD"]
# Add metrics to the data frame
data <- data.frame(data, leverage_values, residuals_studentized, influence_values)
# Plot the regression with metrics
ggplot(data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
geom_segment(aes(x = x, y = y, xend = x, yend = predict(model), color = "Leverage"),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), size = 0.5) +
geom_segment(aes(x = x, y = y, xend = x, yend = predict(model) + residuals_studentized, color = "Residual"),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), size = 0.5) +
geom_segment(aes(x = x, y = y, xend = x, yend = predict(model) + influence_values, color = "Influence"),
alpha = 0.5, arrow = arrow(length = unit(0.02, "npc")), size = 0.5) +
theme_minimal() +
labs(color = "Metric") +
ggtitle("Plot Regresi dengan Leverage, Residual, dan Influence")
data_1<-data.frame(
x=c(0.1,0.45401,1.09765,1.27936,2.20611,2.50064,3.0403,3.23583,4.45308,4.1699,5.28474,5.59238,5.92091,6.66066,6.79953,7.97943,8.41536,8.71607,8.70156,9.16463),
y=c(-0.0716,4.1673,6.5703,13.815,11.4501,12.9554,20.1575,17.5633,26.0317,22.7573,26.303,30.6885,33.9402,30.9228,34.11,44.4536,46.5022,50.0568,46.5475,45.7762)
)
plot(data_1$x,data_1$y,main="No Outlier & Influence")
lm_1<-lm(y~x,data=data_1)
abline(lm_1,col="blue")
data_2<-data.frame(
x=c(0.1,0.45401,1.09765,1.27936,2.20611,2.50064,3.0403,3.23583,4.45308,4.1699,5.28474,5.59238,5.92091,6.66066,6.79953,7.97943,8.41536,8.71607,8.70156,9.16463,4),
y=c(-0.0716,4.1673,6.5703,13.815,11.4501,12.9554,20.1575,17.5633,26.0317,22.7573,26.303,30.6885,33.9402,30.9228,34.11,44.4536,46.5022,50.0568,46.5475,45.7762,40)
)
plot(data_2$x,data_2$y,main="Only Outlier")
lm_2<-lm(y~x,data=data_2)
abline(lm_2,col="blue")
setwd("D:/KULIAH/Tugas/SEMESTER 3/STAT NONPAR")
df = read_excel("data_fix.xlsx")
df
# Sample data
viz_2 = df$daring_motivasi
df
setwd("D:/KULIAH/Tugas/SEMESTER 3/STAT NONPAR")
df = read_excel("data_fix.xlsx")
library(readxl
)
df = read_excel("data_fix.xlsx")
df
# Sample data
viz_2 = df$daring_motivasi
# Create a histogram
hist(viz_2,
main = "Motivasi Mahasiswa Saat Daring",    # Title of the plot
xlab = "Motivasi",                # Label for the x-axis
ylab = "Frekuensi",             # Label for the y-axis
col = "skyblue",                # Color of the bars
border = "black",               # Color of the bar borders
breaks = 5                   # Number of bins
)
library(ggplot2)
# Buat data frame
data <- data.frame(Jawaban = df$peningkatan_setelah_uts)
# Hitung frekuensi
frekuensi <- table(data$Jawaban)
# Buat pie chart dengan ggplot2
ggplot(data, aes(x = "", fill = Jawaban)) +
geom_bar(width = 1, stat = "count") +
coord_polar(theta = "y") +
theme_void() +
ggtitle("Peningkatan Frekuensi Daring Setelah UTS")
ggplot(df, aes(y = df$daring_waktu_ratarata)) +
geom_boxplot() +
labs(title = "Rerata Jam Pembelajaran Daring / Minggu",
y = "Jam")
