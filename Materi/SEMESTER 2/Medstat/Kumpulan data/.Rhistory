library(readxl)
height <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/height.xlsx",
col_types = c("numeric", "numeric"))
View(height)
height <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/height.xlsx",
col_types = c("numeric", "numeric"))
View(height)
cor.test(tinggi,berat, method = 'pearson')
tinggi = height$Height
berat = height$Weight
cor.test(height,tinggi,berat, method = 'pearson')
cor.test(tinggi,berat, method = 'pearson')
cor.test(tinggi,berat, method = 'spearman')
cor.test(tinggi,berat, method = 'kendall')
source("~/.active-rstudio-document")
library(readxl)
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:g12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric"))
View(data_kuesioner)
library(readxl)
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:g12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric"))
View(data_kuesioner)
library(readxl)
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:g12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric"))
View(data_kuesioner)
install.packages("Hmisc")
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:h12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric"))
library(readxl)
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:h12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(data_kuesioner)
library(readxl)
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:h12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(data_kuesioner)
library(Hmisc)
library(Hmisc)
library(Hmisc)
library(Hmisc)
data_kuesioner <- read_excel("D:/Tugas/SEMESTER 2/MEDSTAT/Praktikum - M7/data kuesioner.xlsx",
range = "c1:h12", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(data_kuesioner)
library(Hmisc)
b1 <- slope(x, y)
setwd("D:/Materi/SEMESTER 2/Medstat/Kumpulan data")
data1 = read.csv("possum.csv", header = TRUE) # Memanggil data
data1
## MENGGUNAKAN FUNGSI BAWAAN R
# Membandingkan variabel umur dengan panjang total possum
x = data1$footlgth # variable yang diambil adalah panjang kaki posum(variabel independen/prediktor)
y = data1$earconch # Variabel yang diambil adalah telinga posum(variable dependen/respons)
plot(x,y) # Menampilkan scatter plot dari variabel telinga dan panjang kaki
hasil <- lm(y ~ x, data = data1) # Mencari hasil dengan rumus regresi
summary(hasil) # Menampilkan hasil dari perhitungan regresi
slope = function(x,y){
mean_x = mean(x)
mean_y = mean(y)
sxy = sum((x - mean_x)*(y - mean_y))
sxx = sum((x - mean_x)^2)
b1 = sxy / sxx
return b1
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
b1 <- slope(x, y)
b0 <- intercept(x, y, b1) # pembuatan model model = lm(y~x, data=df) summary(model)
b0
slope = function(x,y){
mean_x = mean(x)
mean_y = mean(y)
sxy = sum((x - mean_x)*(y - mean_y))
sxx = sum((x - mean_x)^2)
b1 = sxy / sxx
return b1
slope = function(x,y){
mean_x = mean(x)
mean_y = mean(y)
sxy = sum((x - mean_x)*(y - mean_y))
sxx = sum((x - mean_x)^2)
b1 = sxy / sxx
return (b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
b0
a = b0
b1 <- slope(x, y)
b1 <- slope(x, y)
b0 <- intercept(x, y, b1) # pembuatan model
model = lm(y~x, data=df)
model = lm(y~x, data=data1)
summary(model)
b1 <- slope(x, y)
b0 <- intercept(x, y, b1)
# pembuatan model
model = lm(y~x, data=data1)
summary(model)
b1
a = b0
b = b1
a
# pembuatan model
model = lm(y~x, data=df)
b1
b1 <- slope(x, y)
b0 <- intercept(x, y, b1)
b1
b1 <- slope(x, y)
b0 <- Intercept(x, y, b1)
b1 <- slope(x, y)
b0 <- Intercept(x, y, b1)
b1 <- slope(x, y)
b0 <- intercept(x, y, b1)
b1
# pembuatan model
model = lm(y~x, data=data1)
summary(model)
b1 <- slope(x, y)
b0 <- intercept(x, y, b1)
b1
b0
data1 = read.csv("possum.csv", header = TRUE) # Memanggil data
data1
slope = function(x,y){
mean_x = mean(x)
mean_y = mean(y)
sxy = sum((x - mean_x)*(y - mean_y))
sxx = sum((x - mean_x)^2)
b1 = sxy / sxx
return (b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
b1 <- slope(x, y)
b0 <- intercept(x, y, b1)
b1
# pembuatan model
model = lm(y~x, data = df)
slope <- function(X, Y){ mean_x <- mean(X) mean_y <- mean(Y) sxy <- sum((X - mean_x)*(Y-mean_y)) sxx <- sum((X - mean_x)^2)
data1 = read.csv("possum.csv", header = TRUE) # Memanggil data
data1
slope <- function(X, Y){ mean_x <- mean(X) mean_y <- mean(Y) sxy <- sum((X - mean_x)*(Y-mean_y)) sxx <- sum((X - mean_x)^2)
x = data1$footlgth
y = data1$earconch
slope <- function(X, Y){
mean_x <- mean(X)
mean_y <- mean(Y)
sxy <- sum((X - mean_x)*(Y-mean_y))
sxx <- sum((X - mean_x)^2)
b1 <- sxy / sxx return(b1)
slope <- function(X, Y){
mean_x <- mean(X)
mean_y <- mean(Y)
sxy <- sum((X - mean_x)*(Y-mean_y))
sxx <- sum((X - mean_x)^2)
b1 <- sxy / sxx
return(b1)
}
intercept <- function(X, Y, b1){
b0 <- mean(Y) - (b1 * mean(X))
return(b0)
}
b1 = slope(x,y)
b0 = intercept(x,y,b1)
b1
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
sxy <- sum((x - mean_x)*(y-mean_y))
sxx <- sum((x - mean_x)^2)
b1 <- sxy / sxx
return(b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
b1 = slope(x,y)
b0 = intercept(x,y,b1)
b1
b0
sxx <- sum((x - mean_x)^2)
b1 <- sxy / sxx
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
sxy <- sum((x - mean_x)*(y-mean_y))
sxx <- sum((x - mean_x)^2)
b1 <- sxy / sxx
return(b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
b0
model$coefficients
summary(model)$r.squared
predict(model, data.frame(x = 50))
y = data1$footlgth
x = data1$earconch
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
sxy <- sum((x - mean_x)*(y-mean_y))
sxx <- sum((x - mean_x)^2)
b1 <- sxy / sxx
return(b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
b1 = slope(x,y)
b0 = intercept(x,y,b1)
b1
summary(model)
summary(hasil) # Menampilkan hasil dari perhitungan regresi
summary(model)
